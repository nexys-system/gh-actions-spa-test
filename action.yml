name: yarn-spa-test
description: This GitHub Action will build and test your app
author: johnb8005
branding:
  icon: book-open
  color: purple
inputs:
  build-command:
    description: build command
    default: VITE_VERSION=${GITHUB_REF##*/} VITE_GIT_SHA=$GITHUB_SHA yarn build
  nodeversion:
    description: node version
    default: 20
  deploy-project-name:
    description: project name for the deploy service
  deploy-token:
    description: token needed to deploy
  gzip-compression:
    description: compresses files to gzip
    default: true
  use-cache:
    description: caches yarn dependencies based on hash of yarn.lock
    default: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.nodeversion }}

    - name: Get yarn cache directory path
      if: ${{ inputs.use-cache == 'true' }}
      id: yarn-cache-dir-path
      run: echo "YARN_CACHE_DIR=$(yarn cache dir)" >> $GITHUB_ENV
      shell: bash

    - name: Cache yarn dependencies
      if: ${{ inputs.use-cache == 'true' }}
      uses: actions/cache@v2
      with:
        path: ${{ env.YARN_CACHE_DIR }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
        
    - name: Install dependencies via yarn
      run: yarn
      shell: bash
    - name: Test
      run: yarn test
      shell: bash
    - name: Build
      run: ${{ inputs.build-command }}
      shell: bash
    - name: Deploy
      run: |
        if [ -n "${{ inputs.deploy-project-name }}" ] && [ -n "${{ inputs.deploy-token }}" ]; then
          # create meta file
          printf "{\"sha\":\"$GITHUB_SHA\",\"version\":\"${GITHUB_REF##*/}\",\"date\":\"$(date -u)\"}" > dist/meta.json
          
          if [ "${{ inputs.gzip-compression }}" = "true" ] ; then
            # gzip compress files - You might want to be selective about what you compress
            find dist -type f \( -name '*.js' -o -name '*.css' -o -name '*.html' \) -exec gzip "{}" \;

            # rename gzipped files to remove .gz extension (optional, depends on your server setup)
            find dist -type f -name '*.gz' -exec sh -c 'mv "$0" "${0%.gz}"' {} \;
          fi

          # zip build
          zip -r dist.zip dist
          # push to deploy service
          curl -k -X POST -H 'X-TOKEN: ${{ inputs.deploy-token }}' -F 'file=@dist.zip' -F 'project=${{ inputs.deploy-project-name }}' https://deploy.nexys.io/upload
          # remove created zip
          rm dist.zip
        else
          echo "not deploying, to deploy set 'deploy-project-name' and 'deploy-token'"
        fi
      shell: bash
